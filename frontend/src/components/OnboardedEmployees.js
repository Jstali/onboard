import React, { useState, useEffect } from "react";
import axios from "axios";
import { toast } from "react-hot-toast";
import { FaEdit, FaEye, FaTrash } from "react-icons/fa";
import { useAuth } from "../contexts/AuthContext";
import { useNavigate } from "react-router-dom";

const OnboardedEmployees = ({ onRefresh }) => {
  const { user, refreshUserData } = useAuth();
  const navigate = useNavigate();
  const [onboardedEmployees, setOnboardedEmployees] = useState([]);
  const [availableManagers, setAvailableManagers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAssignmentModal, setShowAssignmentModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [assignmentData, setAssignmentData] = useState({
    name: "",
    companyEmail: "",
    manager: "",
    manager2: "",
    manager3: "",
  });

  useEffect(() => {
    fetchOnboardedEmployees();
    fetchAvailableManagers();
  }, []);

  // Ensure form data is properly initialized when modal opens
  useEffect(() => {
    if (showAssignmentModal) {
      setAssignmentData({
        name: "",
        companyEmail: "",
        manager: "",
        manager2: "",
        manager3: "",
      });
    }
  }, [showAssignmentModal]);

  const fetchOnboardedEmployees = async () => {
    try {
      setLoading(true);
      const response = await axios.get("/hr/onboarded");
      console.log(
        "🔍 Onboarded employees data:",
        response.data.onboardedEmployees
      );
      setOnboardedEmployees(response.data.onboardedEmployees);
    } catch (error) {
      console.error("Error fetching onboarded employees:", error);
      toast.error("Failed to fetch onboarded employees");
    } finally {
      setLoading(false);
    }
  };

  const fetchAvailableManagers = async () => {
    try {
      const response = await axios.get("/hr/master-managers");
      setAvailableManagers(response.data.managers || []);
    } catch (error) {
      console.error("Error fetching managers:", error);
      // Fallback to empty array if API fails - no hardcoded managers
      setAvailableManagers([]);
    }
  };

  const handleAssignDetails = (employee) => {
    setSelectedEmployee(employee);
    setAssignmentData({
      name: "",
      companyEmail: "",
      manager: "",
      employeeId: "",
    });
    setShowAssignmentModal(true);
  };

  const handleAssignmentSubmit = async () => {
    try {
      if (!assignmentData.name || !assignmentData.companyEmail) {
        toast.error("Name and Company Email are required");
        return;
      }

      // Employee ID will be auto-generated by backend

      console.log("🔍 Submitting assignment data:", assignmentData);
      console.log("🔍 Selected employee ID:", selectedEmployee.id);

      const response = await axios.put(
        `/hr/onboarded/${selectedEmployee.id}/assign`,
        assignmentData
      );

      console.log("🔍 Assignment response:", response.data);

      // Check if the current user's role was updated
      if (response.data.roleUpdated && response.data.newRole === 'manager') {
        console.log("🔍 Current user's role was updated to manager");
        
        // Refresh user data to get the updated role
        const updatedUser = await refreshUserData();
        
        if (updatedUser && updatedUser.role === 'manager') {
          toast.success("Employee details assigned successfully! Your role has been updated to Manager. Redirecting to Manager Dashboard...");
          
          // Small delay to show the success message
          setTimeout(() => {
            navigate('/manager/dashboard');
          }, 2000);
        } else {
          toast.success("Employee details assigned successfully!");
        }
      } else {
        toast.success("Employee details assigned successfully!");
      }

      setShowAssignmentModal(false);
      setSelectedEmployee(null);
      fetchOnboardedEmployees();
      if (onRefresh) onRefresh();
    } catch (error) {
      console.error("Assignment error:", error);
      console.error("Error response:", error.response?.data);
      if (error.response?.data?.errors) {
        console.error("Validation errors:", error.response.data.errors);
      }
      toast.error(
        error.response?.data?.error || "Failed to assign employee details"
      );
    }
  };

  const getStatusBadge = (status) => {
    const base = "px-2 py-1 text-xs font-medium rounded-full";
    switch (status) {
      case "pending_assignment":
        return (
          <span className={`${base} bg-brand-yellow text-brand-black`}>
            Pending Assignment
          </span>
        );
      case "assigned":
        return (
          <span className={`${base} bg-brand-green text-brand-black`}>
            Assigned
          </span>
        );
      default:
        return (
          <span className={`${base} bg-brand-pearl text-brand-black`}>
            {status || "Unknown"}
          </span>
        );
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString();
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-brand-pearl p-6 rounded-lg">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-brand-black mb-2">
          Onboarded Employees
        </h2>
        <p className="text-brand-black/70">
          Employees approved and waiting for HR to assign name, company email,
          and manager.
        </p>
      </div>

      {onboardedEmployees.length === 0 ? (
        <div className="text-center py-8 bg-brand-pearl rounded-lg border border-brand-black/10">
          <div className="text-brand-green text-6xl mb-4">📋</div>
          <h3 className="text-lg font-medium text-brand-black mb-2">
            No Onboarded Employees
          </h3>
          <p className="text-brand-black/60">
            Approved employees will appear here for HR to assign details.
          </p>
        </div>
      ) : (
        <div className="overflow-x-auto bg-brand-pearl shadow-md rounded-lg border border-brand-black/10">
          <table className="min-w-full">
            <thead className="bg-brand-pearl border-b border-brand-black/10">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-brand-black uppercase tracking-wider">
                  Employee
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-brand-black uppercase tracking-wider">
                  Type
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-brand-black uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-brand-black uppercase tracking-wider">
                  Submitted
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-brand-black uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-brand-pearl divide-y divide-brand-black/10">
              {onboardedEmployees.map((employee, index) => (
                <tr
                  key={employee.id}
                  className={`${
                    index % 2 === 0 ? "bg-brand-pearl" : "bg-ui-secondary"
                  } hover:bg-ui-secondary`}
                >
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-brand-black">
                        {employee.user_email}
                      </div>
                      <div className="text-sm text-brand-black/70">
                        {employee.form_data?.name || "Name not available"}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 py-1 text-xs font-medium rounded-full bg-brand-blue text-brand-black">
                      {employee.employee_type || "Not Specified"}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getStatusBadge(employee.status)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-brand-black/70">
                    {formatDate(employee.submitted_at)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      onClick={() => handleAssignDetails(employee)}
                      className="text-brand-violet hover:text-brand-green mr-3"
                      title="Assign Details"
                    >
                      <FaEdit className="inline-block" />
                    </button>
                    <button
                      onClick={() => {
                        setSelectedEmployee(employee);
                        setShowViewModal(true);
                      }}
                      className="text-brand-blue hover:text-brand-green mr-3"
                      title="View Details"
                    >
                      <FaEye className="inline-block" />
                    </button>
                    <button
                      onClick={async () => {
                        if (!window.confirm("Delete this onboarded record?"))
                          return;
                        try {
                          await axios.delete(`/hr/onboarded/${employee.id}`);
                          toast.success("Onboarded record deleted");
                          fetchOnboardedEmployees();
                          if (onRefresh) onRefresh();
                        } catch (err) {
                          console.error("Delete onboarded error:", err);
                          toast.error(
                            err.response?.data?.error ||
                              "Failed to delete record"
                          );
                        }
                      }}
                      className="text-brand-red hover:text-hover-danger"
                      title="Delete"
                    >
                      <FaTrash className="inline-block" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Assignment Modal */}
      {showAssignmentModal && selectedEmployee && (
        <div className="fixed inset-0 bg-brand-black/50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border border-brand-black/10 w-96 shadow-lg rounded-lg bg-brand-pearl">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-brand-black">
                Assign Employee Details
              </h3>
              <button
                onClick={() => setShowAssignmentModal(false)}
                className="text-brand-black/60 hover:text-brand-black"
              >
                ×
              </button>
            </div>

            <div className="mb-4">
              <p className="text-sm text-brand-black/70 mb-2">
                <strong>Employee:</strong> {selectedEmployee.user_email}
              </p>
              <p className="text-sm text-brand-black/70">
                <strong>Type:</strong> {selectedEmployee.employee_type}
              </p>
            </div>

            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleAssignmentSubmit();
              }}
              className="space-y-4"
            >
              <div>
                <label className="block text-sm font-medium text-brand-black">
                  Employee Name *
                </label>
                <input
                  type="text"
                  value={assignmentData.name}
                  onChange={(e) =>
                    setAssignmentData((prev) => ({
                      ...prev,
                      name: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 bg-brand-pearl border border-brand-black/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-green focus:border-brand-green text-brand-black"
                  placeholder="Enter employee name"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-brand-black">
                  Company Email *
                </label>
                <input
                  type="email"
                  value={assignmentData.companyEmail}
                  onChange={(e) =>
                    setAssignmentData((prev) => ({
                      ...prev,
                      companyEmail: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 bg-brand-pearl border border-brand-black/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-green focus:border-brand-green text-brand-black"
                  placeholder="employee@company.com"
                  required
                />
              </div>

              <div className="bg-brand-pearl border border-brand-blue/30 rounded-lg p-3">
                <p className="text-sm text-brand-black">
                  <strong>Note:</strong> Employee ID will be automatically
                  generated as a unique 6-digit number when you submit this
                  form.
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-brand-black">
                  Manager 1 *
                </label>
                <select
                  value={assignmentData.manager}
                  onChange={(e) =>
                    setAssignmentData((prev) => ({
                      ...prev,
                      manager: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 bg-brand-pearl border border-brand-black/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-green focus:border-brand-green text-brand-black"
                  required
                >
                  <option value="">Select a manager</option>
                  {availableManagers
                    .filter((manager) => {
                      // Exclude the current employee from manager list
                      // Compare by email since that's more reliable than name
                      const currentEmployeeEmail = selectedEmployee?.email;
                      return manager.company_email !== currentEmployeeEmail;
                    })
                    .map((manager, index) => (
                      <option
                        key={`manager1-${manager.employee_name}-${manager.company_email}-${index}`}
                        value={manager.employee_name}
                      >
                        {manager.employee_name}
                      </option>
                    ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-brand-black">
                  Manager 2 (Optional)
                </label>
                <select
                  value={assignmentData.manager2}
                  onChange={(e) =>
                    setAssignmentData((prev) => ({
                      ...prev,
                      manager2: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 bg-brand-pearl border border-brand-black/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-green focus:border-brand-green text-brand-black"
                >
                  <option value="">Select a manager (optional)</option>
                  {availableManagers
                    .filter((manager) => {
                      // Exclude the current employee from manager list
                      const currentEmployeeEmail = selectedEmployee?.email;
                      return manager.company_email !== currentEmployeeEmail;
                    })
                    .map((manager, index) => (
                      <option
                        key={`manager2-${manager.employee_name}-${manager.company_email}-${index}`}
                        value={manager.employee_name}
                      >
                        {manager.employee_name}
                      </option>
                    ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-brand-black">
                  Manager 3 (Optional)
                </label>
                <select
                  value={assignmentData.manager3}
                  onChange={(e) =>
                    setAssignmentData((prev) => ({
                      ...prev,
                      manager3: e.target.value,
                    }))
                  }
                  className="w-full px-3 py-2 bg-brand-pearl border border-brand-black/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-green focus:border-brand-green text-brand-black"
                >
                  <option value="">Select a manager (optional)</option>
                  {availableManagers
                    .filter((manager) => {
                      // Exclude the current employee from manager list
                      const currentEmployeeEmail = selectedEmployee?.email;
                      return manager.company_email !== currentEmployeeEmail;
                    })
                    .map((manager, index) => (
                      <option
                        key={`manager3-${manager.employee_name}-${manager.company_email}-${index}`}
                        value={manager.employee_name}
                      >
                        {manager.employee_name}
                      </option>
                    ))}
                </select>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  type="button"
                  onClick={() => setShowAssignmentModal(false)}
                  className="px-4 py-2 text-sm font-medium text-brand-black bg-brand-violet rounded-lg hover:bg-hover-secondary shadow"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 text-sm font-medium text-brand-black bg-brand-green rounded-lg hover:bg-hover-primary shadow"
                >
                  Assign Details
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showViewModal && selectedEmployee && (
        <div className="fixed inset-0 bg-brand-black/50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border border-brand-black/10 w-11/12 max-w-3xl shadow-lg rounded-lg bg-brand-pearl">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-brand-black">
                Employee Details
              </h3>
              <button
                onClick={() => setShowViewModal(false)}
                className="text-brand-black/60 hover:text-brand-black"
              >
                ×
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-brand-black/70">
                  <strong>Email:</strong> {selectedEmployee.user_email}
                </p>
                <p className="text-sm text-brand-black/70">
                  <strong>Company Email:</strong>{" "}
                  {selectedEmployee.company_email || "—"}
                </p>
                <p className="text-sm text-brand-black/70">
                  <strong>Type:</strong> {selectedEmployee.employee_type || "—"}
                </p>
                <p className="text-sm text-brand-black/70">
                  <strong>Status:</strong> {selectedEmployee.status}
                </p>
              </div>
              <div>
                <p className="text-sm text-brand-black/70">
                  <strong>Submitted:</strong>{" "}
                  {formatDate(selectedEmployee.submitted_at)}
                </p>
                <p className="text-sm text-brand-black/70">
                  <strong>Manager:</strong>{" "}
                  {selectedEmployee.manager_name || "Not assigned"}
                </p>
                <p className="text-sm text-brand-black/70">
                  <strong>Notes:</strong> {selectedEmployee.notes || "—"}
                </p>
              </div>
            </div>

            {selectedEmployee.form_data && (
              <div className="mt-4">
                <h4 className="text-md font-medium text-brand-black mb-2">
                  Form Summary
                </h4>
                <div className="bg-brand-pearl border border-brand-black/10 rounded p-3 text-sm text-brand-black space-y-1">
                  {selectedEmployee.form_data.name && (
                    <p>
                      <strong>Name:</strong> {selectedEmployee.form_data.name}
                    </p>
                  )}
                  {selectedEmployee.form_data.phone && (
                    <p>
                      <strong>Phone:</strong> {selectedEmployee.form_data.phone}
                    </p>
                  )}
                  {selectedEmployee.form_data.address && (
                    <p>
                      <strong>Address:</strong>{" "}
                      {selectedEmployee.form_data.address}
                    </p>
                  )}
                  {selectedEmployee.form_data.education && (
                    <p>
                      <strong>Education:</strong>{" "}
                      {selectedEmployee.form_data.education}
                    </p>
                  )}
                  {selectedEmployee.form_data.experience && (
                    <p>
                      <strong>Experience:</strong>{" "}
                      {selectedEmployee.form_data.experience}
                    </p>
                  )}
                </div>
              </div>
            )}

            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowViewModal(false)}
                className="px-4 py-2 text-sm font-medium text-brand-black bg-brand-violet rounded-lg hover:bg-hover-secondary shadow"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OnboardedEmployees;
