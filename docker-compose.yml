version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: onboardd-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: onboardd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Stali
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - onboardd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d onboardd"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: onboardd-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: onboardd
      DB_USER: postgres
      DB_PASSWORD: Stali
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      EMAIL_USER: alphanxzen@gmail.com
      EMAIL_PASS: rewn cxqu eiuz fgmd
      PORT: 5001
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - onboardd-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/attendance/settings"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  onboardd-network:
    driver: bridge
